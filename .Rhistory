if(stop_if_unusual) {
nb = round(moment.approx(bpar, 1/framerate)[1])
mean_good = between(nb, 1, 25)
if(!mean_good){
warn_notice = paste('Parameters expected to result in an unusual (~', nb, ') number of reappearances. Set stop_if_unusual = F to ignore this warning.', sep = "")
print(warn_notice)
exit()
}
}
fr = framerate
gen = pars.to.simulator(bpar, 0, fr, T)
pargen = function() rexp(1, orate)
W = owin(range(data[,1]), range(data[,2]))
dpp = ppp(x = data[,1], y = data[,2], window = W)
dtpar = add.cluster.layer(dpp, gen, 0, pargen, fr); dtpar = noise_add(dtpar, stds)$D; dtpar$marks = as.integer(dtpar$marks)
df = dtpar %$% data.frame(x = x, y = y, time = marks, sds = attributes(.)$s)
return(df)
}
a = rpoispp(0.001, win = square(1000))
a = data.frame(a$x,a$y)
b = Add_blinking(a, c(0.01,5,0.3,1))
plot(b[,1:2], pch = 19)
points(a[,1:2], pch = 19, col = 2)
source(file.path("Dependencies", "Dependencies.R"))
Add_blinking = function(data, parameters, framerate = 25, stds = rgamma(1000,4,4/20), stop_if_unusual = TRUE) {
# Data is a data-frame with columns (X, Y)
# Parameters are the blinking parameters (r_F, r_D, r_R, r_B)
orate = parameters[1]
bpar = parameters[c(4,2,3)]
if(stop_if_unusual) {
nb = round(moment.approx(bpar, 1/framerate)[1])
mean_good = between(nb, 1, 25)
if(!mean_good){
warn_notice = paste('Parameters expected to result in an unusual (~', nb, ') number of reappearances. Set stop_if_unusual = F to ignore this warning.', sep = "")
stop(warn_notice)
}
}
fr = framerate
gen = pars.to.simulator(bpar, 0, fr, T)
pargen = function() rexp(1, orate)
W = owin(range(data[,1]), range(data[,2]))
dpp = ppp(x = data[,1], y = data[,2], window = W)
dtpar = add.cluster.layer(dpp, gen, 0, pargen, fr); dtpar = noise_add(dtpar, stds)$D; dtpar$marks = as.integer(dtpar$marks)
df = dtpar %$% data.frame(x = x, y = y, time = marks, sds = attributes(.)$s)
return(df)
}
a = rpoispp(0.001, win = square(1000))
a = data.frame(a$x,a$y)
b = Add_blinking(a, c(0.01,5,0.3,1))
plot(b[,1:2], pch = 19)
points(a[,1:2], pch = 19, col = 2)
ppp
source(file.path("Dependencies", "Dependencies.R"))
Add_blinking = function(data, parameters, framerate = 25, stds = rgamma(1000,4,4/20), stop_if_unusual = TRUE) {
# Data is a data-frame with columns (X, Y)
# Parameters are the blinking parameters (r_F, r_D, r_R, r_B)
orate = parameters[1]
bpar = parameters[c(4,2,3)]
if(stop_if_unusual) {
nb = round(moment.approx(bpar, 1/framerate)[1])
mean_good = between(nb, 1, 25)
if(!mean_good){
warn_notice = paste('Parameters would result in an unusual (~', nb, ') number of reappearances. Set stop_if_unusual = F to ignore.', sep = "")
stop(warn_notice)
}
}
fr = framerate
gen = pars.to.simulator(bpar, 0, fr, T)
pargen = function() rexp(1, orate)
W = owin(range(data[,1]), range(data[,2]))
dpp = ppp(x = data[,1], y = data[,2], window = W, check = F)
dtpar = add.cluster.layer(dpp, gen, 0, pargen, fr); dtpar = noise_add(dtpar, stds)$D; dtpar$marks = as.integer(dtpar$marks)
df = dtpar %$% data.frame(x = x, y = y, time = marks, sds = attributes(.)$s)
return(df)
}
a = rpoispp(0.001, win = square(1000))
a = data.frame(a$x,a$y)
b = Add_blinking(a, c(0.01,5,0.3,1))
plot(b[,1:2], pch = 19)
points(a[,1:2], pch = 19, col = 2)
source(file.path("Dependencies", "Dependencies.R"))
Add_blinking = function(data, parameters, framerate = 25, stds = rgamma(1000,4,4/20), stop_if_unusual = TRUE) {
# Data is a data-frame with columns (X, Y)
# Parameters are the blinking parameters (r_F, r_D, r_R, r_B)
orate = parameters[1]
bpar = parameters[c(4,2,3)]
if(stop_if_unusual) {
nb = round(moment.approx(bpar, 1/framerate)[1])
mean_good = between(nb, 1, 25)
if(!mean_good){
warn_notice = paste('Parameters would result in an unusual (~', nb, ') number of reappearances. Set stop_if_unusual = F to ignore.', sep = "")
stop(warn_notice)
}
}
fr = framerate
gen = pars.to.simulator(bpar, 0, fr, T)
pargen = function() rexp(1, orate)
W = owin(range(data[,1]), range(data[,2]))
dpp = ppp(x = data[,1], y = data[,2], window = W, check = F)
dtpar = add.cluster.layer(dpp, gen, 0, pargen, fr); dtpar = noise_add(dtpar, stds)$D; dtpar$marks = as.integer(dtpar$marks)
df = dtpar %$% data.frame(x = x, y = y, time = marks, sds = attributes(.)$s)
return(df)
}
a = rpoispp(0.001, win = square(1000))
a = data.frame(a$x,a$y)
b = Add_blinking(a, c(0.01,5,0.3,3))
plot(b[,1:2], pch = 19)
points(a[,1:2], pch = 19, col = 2)
source(file.path("Dependencies", "Dependencies.R"))
Add_blinking = function(data, parameters, framerate = 25, stds = rgamma(1000,4,4/20), stop_if_unusual = TRUE) {
# Data is a data-frame with columns (X, Y)
# Parameters are the blinking parameters (r_F, r_D, r_R, r_B)
orate = parameters[1]
bpar = parameters[c(4,2,3)]
if(stop_if_unusual) {
nb = round(moment.approx(bpar, 1/framerate)[1])
mean_good = between(nb, 1, 25)
if(!mean_good){
warn_notice = paste('Parameters would result in an unusual (~', nb, ') number of reappearances. Set stop_if_unusual = F to ignore.', sep = "")
stop(warn_notice)
}
}
fr = framerate
gen = pars.to.simulator(bpar, 0, fr, T)
pargen = function() rexp(1, orate)
W = owin(range(data[,1]), range(data[,2]))
dpp = ppp(x = data[,1], y = data[,2], window = W, check = FALSE)
dtpar = add.cluster.layer(dpp, gen, 0, pargen, fr); dtpar = noise_add(dtpar, stds)$D; dtpar$marks = as.integer(dtpar$marks)
df = dtpar %$% data.frame(x = x, y = y, time = marks, sds = attributes(.)$s)
return(df)
}
a = rpoispp(0.001, win = square(1000))
a = data.frame(a$x,a$y)
b = Add_blinking(a, c(0.01,5,0.3,3))
plot(b[,1:2], pch = 19)
points(a[,1:2], pch = 19, col = 2)
add.cluster.layer
ppp
getOption('warn')
getOption('Warn')
getOption('warn')
source(file.path("Dependencies", "Dependencies.R"))
Add_blinking = function(data, parameters, framerate = 25, stds = rgamma(1000,4,4/20), stop_if_unusual = TRUE) {
# Data is a data-frame with columns (X, Y)
# Parameters are the blinking parameters (r_F, r_D, r_R, r_B)
orate = parameters[1]
bpar = parameters[c(4,2,3)]
if(stop_if_unusual) {
nb = round(moment.approx(bpar, 1/framerate)[1])
mean_good = between(nb, 1, 25)
sl = meanapprox(bpar, 1/framerate)*orate
start_good = sl > 0.1
if(!mean_good){
warn_notice = paste('Parameters would result in an unusual (~', nb, ') number of reappearances. Set stop_if_unusual = F to ignore.', sep = "")
stop(warn_notice)
}
if(!start_good) {
warn_notice = paste('Parameters would result in very long lived blinking compared to the activation time (ratio ~', round(sl,3), '). Set stop_if_unusual = F to ignore.', sep = "")
}
}
fr = framerate
gen = pars.to.simulator(bpar, 0, fr, T)
pargen = function() rexp(1, orate)
W = owin(range(data[,1]), range(data[,2]))
dpp = ppp(x = data[,1], y = data[,2], window = W)
dtpar = add.cluster.layer(dpp, gen, 0, pargen, fr); dtpar = noise_add(dtpar, stds)$D; dtpar$marks = as.integer(dtpar$marks)
df = dtpar %$% data.frame(x = x, y = y, time = marks, sds = attributes(.)$s)
return(df)
}
a = rpoispp(0.001, win = square(1000))
a = data.frame(a$x,a$y)
b = Add_blinking(a, c(0.01,5,0.3,3))
b
b = Add_blinking(a, c(1,5,0.3,3))
b = Add_blinking(a, c(2,5,0.3,3))
b = Add_blinking(a, c(10,5,0.3,3))
source(file.path("Dependencies", "Dependencies.R"))
Add_blinking = function(data, parameters, framerate = 25, stds = rgamma(1000,4,4/20), stop_if_unusual = TRUE) {
# Data is a data-frame with columns (X, Y)
# Parameters are the blinking parameters (r_F, r_D, r_R, r_B)
orate = parameters[1]
bpar = parameters[c(4,2,3)]
if(stop_if_unusual) {
nb = round(moment.approx(bpar, 1/framerate)[1])
mean_good = between(nb, 1, 25)
sl = meanapprox(bpar, 1/framerate)*orate
start_good = sl > 0.1
if(!mean_good){
warn_notice = paste('Parameters would result in an unusual (~', nb, ') number of reappearances. Set stop_if_unusual = F to ignore.', sep = "")
stop(warn_notice)
}
if(!start_good) {
warn_notice = paste('Parameters would result in very long lived blinking compared to the activation time (ratio ~', round(sl,3), '). Set stop_if_unusual = F to ignore.', sep = "")
}
}
fr = framerate
gen = pars.to.simulator(bpar, 0, fr, T)
pargen = function() rexp(1, orate)
W = owin(range(data[,1]), range(data[,2]))
dpp = ppp(x = data[,1], y = data[,2], window = W)
dtpar = add.cluster.layer(dpp, gen, 0, pargen, fr); dtpar = noise_add(dtpar, stds)$D; dtpar$marks = as.integer(dtpar$marks)
df = dtpar %$% data.frame(x = x, y = y, time = marks, sds = attributes(.)$s)
return(df)
}
a = rpoispp(0.001, win = square(1000))
a = data.frame(a$x,a$y)
b = Add_blinking(a, c(10,5,0.3,3))
source(file.path("Dependencies", "Dependencies.R"))
Add_blinking = function(data, parameters, framerate = 25, stds = rgamma(1000,4,4/20), stop_if_unusual = TRUE) {
# Data is a data-frame with columns (X, Y)
# Parameters are the blinking parameters (r_F, r_D, r_R, r_B)
orate = parameters[1]
bpar = parameters[c(4,2,3)]
if(stop_if_unusual) {
nb = round(moment.approx(bpar, 1/framerate)[1])
mean_good = between(nb, 1, 25)
sl = meanapprox(bpar, 1/framerate)*orate
start_good = sl > 0.1
print(sl)
if(!mean_good){
warn_notice = paste('Parameters would result in an unusual (~', nb, ') number of reappearances. Set stop_if_unusual = F to ignore.', sep = "")
stop(warn_notice)
}
if(!start_good) {
warn_notice = paste('Parameters would result in very long lived blinking compared to the activation time (ratio ~', round(sl,3), '). Set stop_if_unusual = F to ignore.', sep = "")
}
}
fr = framerate
gen = pars.to.simulator(bpar, 0, fr, T)
pargen = function() rexp(1, orate)
W = owin(range(data[,1]), range(data[,2]))
dpp = ppp(x = data[,1], y = data[,2], window = W)
dtpar = add.cluster.layer(dpp, gen, 0, pargen, fr); dtpar = noise_add(dtpar, stds)$D; dtpar$marks = as.integer(dtpar$marks)
df = dtpar %$% data.frame(x = x, y = y, time = marks, sds = attributes(.)$s)
return(df)
}
a = rpoispp(0.001, win = square(1000))
a = data.frame(a$x,a$y)
b = Add_blinking(a, c(10,5,0.3,3))
source(file.path("Dependencies", "Dependencies.R"))
Add_blinking = function(data, parameters, framerate = 25, stds = rgamma(1000,4,4/20), stop_if_unusual = TRUE) {
# Data is a data-frame with columns (X, Y)
# Parameters are the blinking parameters (r_F, r_D, r_R, r_B)
orate = parameters[1]
bpar = parameters[c(4,2,3)]
if(stop_if_unusual) {
nb = round(moment.approx(bpar, 1/framerate)[1])
mean_good = between(nb, 1, 25)
sl = meanapprox(bpar, 1/framerate)*orate
start_good = sl <= 0.1
print(sl)
if(!mean_good){
warn_notice = paste('Parameters would result in an unusual (~', nb, ') number of reappearances. Set stop_if_unusual = F to ignore.', sep = "")
stop(warn_notice)
}
if(!start_good) {
warn_notice = paste('Parameters would result in very long lived blinking compared to the activation time (ratio ~', round(sl,3), '). Set stop_if_unusual = F to ignore.', sep = "")
}
}
fr = framerate
gen = pars.to.simulator(bpar, 0, fr, T)
pargen = function() rexp(1, orate)
W = owin(range(data[,1]), range(data[,2]))
dpp = ppp(x = data[,1], y = data[,2], window = W)
dtpar = add.cluster.layer(dpp, gen, 0, pargen, fr); dtpar = noise_add(dtpar, stds)$D; dtpar$marks = as.integer(dtpar$marks)
df = dtpar %$% data.frame(x = x, y = y, time = marks, sds = attributes(.)$s)
return(df)
}
a = rpoispp(0.001, win = square(1000))
a = data.frame(a$x,a$y)
b = Add_blinking(a, c(10,5,0.3,3))
source(file.path("Dependencies", "Dependencies.R"))
Add_blinking = function(data, parameters, framerate = 25, stds = rgamma(1000,4,4/20), stop_if_unusual = TRUE) {
# Data is a data-frame with columns (X, Y)
# Parameters are the blinking parameters (r_F, r_D, r_R, r_B)
orate = parameters[1]
bpar = parameters[c(4,2,3)]
if(stop_if_unusual) {
nb = round(moment.approx(bpar, 1/framerate)[1])
mean_good = between(nb, 1, 25)
sl = meanapprox(bpar, 1/framerate)*orate
start_good = sl <= 0.1
if(!mean_good){
warn_notice = paste('Parameters would result in an unusual (~', nb, ') number of reappearances. Set stop_if_unusual = F to ignore.', sep = "")
stop(warn_notice)
}
if(!start_good) {
warn_notice = paste('Parameters would result in very long lived blinking compared to the activation time (ratio ~', round(sl,3), '). Set stop_if_unusual = F to ignore.', sep = "")
}
}
fr = framerate
gen = pars.to.simulator(bpar, 0, fr, T)
pargen = function() rexp(1, orate)
W = owin(range(data[,1]), range(data[,2]))
dpp = ppp(x = data[,1], y = data[,2], window = W)
dtpar = add.cluster.layer(dpp, gen, 0, pargen, fr); dtpar = noise_add(dtpar, stds)$D; dtpar$marks = as.integer(dtpar$marks)
df = dtpar %$% data.frame(x = x, y = y, time = marks, sds = attributes(.)$s)
return(df)
}
a = rpoispp(0.001, win = square(1000))
a = data.frame(a$x,a$y)
b = Add_blinking(a, c(10,5,0.3,3))
source(file.path("Dependencies", "Dependencies.R"))
Add_blinking = function(data, parameters, framerate = 25, stds = rgamma(1000,4,4/20), stop_if_unusual = TRUE) {
# Data is a data-frame with columns (X, Y)
# Parameters are the blinking parameters (r_F, r_D, r_R, r_B)
orate = parameters[1]
bpar = parameters[c(4,2,3)]
if(stop_if_unusual) {
nb = round(moment.approx(bpar, 1/framerate)[1])
mean_good = between(nb, 1, 25)
sl = meanapprox(bpar, 1/framerate)*orate
start_good = sl <= 0.1
print(start_good)
if(!mean_good){
warn_notice = paste('Parameters would result in an unusual (~', nb, ') number of reappearances. Set stop_if_unusual = F to ignore.', sep = "")
stop(warn_notice)
}
if(!start_good) {
warn_notice = paste('Parameters would result in very long lived blinking compared to the activation time (ratio ~', round(sl,3), '). Set stop_if_unusual = F to ignore.', sep = "")
}
}
fr = framerate
gen = pars.to.simulator(bpar, 0, fr, T)
pargen = function() rexp(1, orate)
W = owin(range(data[,1]), range(data[,2]))
dpp = ppp(x = data[,1], y = data[,2], window = W)
dtpar = add.cluster.layer(dpp, gen, 0, pargen, fr); dtpar = noise_add(dtpar, stds)$D; dtpar$marks = as.integer(dtpar$marks)
df = dtpar %$% data.frame(x = x, y = y, time = marks, sds = attributes(.)$s)
return(df)
}
a = rpoispp(0.001, win = square(1000))
a = data.frame(a$x,a$y)
b = Add_blinking(a, c(10,5,0.3,3))
source(file.path("Dependencies", "Dependencies.R"))
Add_blinking = function(data, parameters, framerate = 25, stds = rgamma(1000,4,4/20), stop_if_unusual = TRUE) {
# Data is a data-frame with columns (X, Y)
# Parameters are the blinking parameters (r_F, r_D, r_R, r_B)
orate = parameters[1]
bpar = parameters[c(4,2,3)]
if(stop_if_unusual) {
nb = round(moment.approx(bpar, 1/framerate)[1])
mean_good = between(nb, 1, 25)
sl = meanapprox(bpar, 1/framerate)*orate
start_good = sl <= 0.1
print(start_good)
if(!mean_good){
warn_notice = paste('Parameters would result in an unusual (~', nb, ') number of reappearances. Set stop_if_unusual = F to ignore.', sep = "")
stop(warn_notice)
}
if(!start_good) {
warn_notice = paste('Parameters would result in very long lived blinking compared to the activation time (ratio ~', round(sl,3), '). Set stop_if_unusual = F to ignore.', sep = "")
stop(warn_notice)
}
}
fr = framerate
gen = pars.to.simulator(bpar, 0, fr, T)
pargen = function() rexp(1, orate)
W = owin(range(data[,1]), range(data[,2]))
dpp = ppp(x = data[,1], y = data[,2], window = W)
dtpar = add.cluster.layer(dpp, gen, 0, pargen, fr); dtpar = noise_add(dtpar, stds)$D; dtpar$marks = as.integer(dtpar$marks)
df = dtpar %$% data.frame(x = x, y = y, time = marks, sds = attributes(.)$s)
return(df)
}
a = rpoispp(0.001, win = square(1000))
a = data.frame(a$x,a$y)
b = Add_blinking(a, c(10,5,0.3,3))
source(file.path("Dependencies", "Dependencies.R"))
Add_blinking = function(data, parameters, framerate = 25, stds = rgamma(1000,4,4/20), stop_if_unusual = TRUE) {
# Data is a data-frame with columns (X, Y)
# Parameters are the blinking parameters (r_F, r_D, r_R, r_B)
orate = parameters[1]
bpar = parameters[c(4,2,3)]
if(stop_if_unusual) {
nb = round(moment.approx(bpar, 1/framerate)[1])
mean_good = between(nb, 1, 25)
sl = meanapprox(bpar, 1/framerate)*orate
start_good = sl <= 0.1
if(!mean_good){
warn_notice = paste('Parameters would result in an unusual (~', nb, ') number of reappearances. Set stop_if_unusual = F to ignore.', sep = "")
stop(warn_notice)
}
if(!start_good) {
warn_notice = paste('Parameters would result in very long lived blinking compared to the activation time (ratio ~', round(sl,3), '). Set stop_if_unusual = F to ignore.', sep = "")
stop(warn_notice)
}
}
fr = framerate
gen = pars.to.simulator(bpar, 0, fr, T)
pargen = function() rexp(1, orate)
W = owin(range(data[,1]), range(data[,2]))
dpp = ppp(x = data[,1], y = data[,2], window = W)
dtpar = add.cluster.layer(dpp, gen, 0, pargen, fr); dtpar = noise_add(dtpar, stds)$D; dtpar$marks = as.integer(dtpar$marks)
df = dtpar %$% data.frame(x = x, y = y, time = marks, sds = attributes(.)$s)
return(df)
}
a = rpoispp(0.001, win = square(1000))
a = data.frame(a$x,a$y)
b = Add_blinking(a, c(10,5,0.3,3))
b = Add_blinking(a, c(1,5,0.3,3))
b = Add_blinking(a, c(0.1,5,0.3,3))
b = Add_blinking(a, c(0.01,5,0.3,3))
b = Add_blinking(a, c(0.01,5,0.3,3))
source(file.path("Dependencies", "Dependencies.R"))
Add_blinking = function(data, parameters, framerate = 25, stds = rgamma(1000,4,4/20), stop_if_unusual = TRUE) {
# Data is a data-frame with columns (X, Y)
# Parameters are the blinking parameters (r_F, r_D, r_R, r_B)
orate = parameters[1]
bpar = parameters[c(4,2,3)]
if(stop_if_unusual) {
nb = round(moment.approx(bpar, 1/framerate)[1])
mean_good = between(nb, 2, 25)
sl = meanapprox(bpar, 1/framerate)*orate
start_good = (sl <= 0.1)
if(!mean_good){
warn_notice = paste('Parameters would result in an unusual (~', nb, ') number of reappearances. Set stop_if_unusual = F to ignore.', sep = "")
stop(warn_notice)
}
if(!start_good) {
warn_notice = paste('Parameters would result in very long lived blinking compared to the activation time (ratio ~', round(sl,3), '). Set stop_if_unusual = F to ignore.', sep = "")
stop(warn_notice)
}
}
fr = framerate
gen = pars.to.simulator(bpar, 0, fr, T)
pargen = function() rexp(1, orate)
W = owin(range(data[,1]), range(data[,2]))
dpp = ppp(x = data[,1], y = data[,2], window = W)
dtpar = add.cluster.layer(dpp, gen, 0, pargen, fr); dtpar = noise_add(dtpar, stds)$D; dtpar$marks = as.integer(dtpar$marks)
df = dtpar %$% data.frame(x = x, y = y, time = marks, sds = attributes(.)$s)
return(df)
}
a = rpoispp(0.001, win = square(1000))
a = data.frame(a$x,a$y)
b = Add_blinking(a, c(0.01,5,0.3,3))
source("main.R")
proteins = rpoispp(0.001, win = square(1000))
proteins
plot(proteins, asp = 1)
plot(proteins, asp = 1, pch = 19)
blinking_params = c(0.001, 5, 0.75, 2) # (r_F, r_D, r_R, r_B)
framerate = 25
uncertainties = rgamma(1000, 4/20, 20)
hist(uncertainties)
uncertainties = rgamma(1000, 4/20, 4)
hist(uncertainties)
uncertainties = rgamma(1000, 4, 4/20)
hist(uncertainties)
blinking = Add_blinking(proteins, blinking_params, framerate, uncertainties)
proteins = rpoispp(0.001, win = square(1000))
proteins_df = data.frame(X = proteins$x, Y = proteins$y)
plot(proteins, asp = 1, pch = 19)
plot(proteins_df, asp = 1, pch = 19)
blinking = Add_blinking(proteins_df, blinking_params, framerate, uncertainties)
plot(blinking[,1:2])
plot(blinking[,1:2], pch = 19)
blinking_params = c(0.001, 5, 0.75, 2.5) # (r_F, r_D, r_R, r_B)
framerate = 25
uncertainties = rgamma(1000, 4, 4/20)
blinking = Add_blinking(proteins_df, blinking_params, framerate, uncertainties)
plot(blinking[,1:2], pch = 19)
plot(blinking[,1:2], pch = 19, asp = 1, cex = 1)
plot(blinking[,1:2], pch = 19, asp = 1, cex = 0.5)
points(proteins_df, pch = 19, cex = 1, col = 2)
par(mfrow = c(2,1), mai = rep(0.2,4))
plot(blinking[,1:2], pch = 19, asp = 1, cex = 0.5)
par(mfrow = c(1,2), mai = rep(0.2,4))
plot(blinking[,1:2], pch = 19, asp = 1, cex = 0.5)
plot(blinking[,c(1,3)], pch = 19, asp = 1, cex = 0.5)
plot(blinking[,c(1,3)], pch = 19, cex = 0.5)
blinking
plot(blinking[,c(1,3)], pch = 19, cex = 0.5, ylim = c(0,1e3))
plot(blinking[,c(1,3)], pch = 19, cex = 0.5, ylim = c(0,2e3))
plot(blinking[,c(1,3)], pch = 19, cex = 0.5, ylim = c(0,3e3))
plot(blinking[,c(1,3)], pch = 19, cex = 0.5, ylim = c(0,4e3))
plot(blinking[,1:2], pch = 19, asp = 1, cex = 0.5)
plot(blinking[,c(1,3)], pch = 19, cex = 0.5, ylim = c(0,25*10))
25*10
plot(blinking[,c(1,3)], pch = 19, cex = 0.5, ylim = c(0,25*60))
60*25
blinking_params = c(0.005, 5, 0.75, 2.5) # (r_F, r_D, r_R, r_B)
framerate = 25
uncertainties = rgamma(1000, 4, 4/20)
blinking = Add_blinking(proteins_df, blinking_params, framerate, uncertainties)
# Plotting xy blinking data
plot(blinking[,1:2], pch = 19, asp = 1, cex = 0.5)
plot(blinking[,c(1,3)], pch = 19, cex = 0.5, ylim = c(0,25*60))
25*60
par(mfrow = c(1))
par(mfrow = c(1,1))
# Make sure to set the working directory to the location of the main.R file.
# setwd(...)
source("main.R")
# The function takes as input (X,Y)-coordinates of real 'protein' locations.
# We simulate some Poisson proteins.
proteins = rpoispp(0.001, win = square(1000))
proteins_df = data.frame(X = proteins$x, Y = proteins$y)
plot(proteins_df, asp = 1, pch = 19)
# We add blinking following the 4-state blinking model, with specified rates and camera framerate.
# Additionally, we specify an empirical distribution of localisation uncertainties (has a reasonable default).
blinking_params = c(0.005, 5, 0.75, 2.5) # (r_F, r_D, r_R, r_B)
framerate = 25
uncertainties = rgamma(1000, 4, 4/20)
blinking = Add_blinking(proteins_df, blinking_params, framerate, uncertainties)
# Plotting xy blinking data
plot(blinking[,1:2], pch = 19, asp = 1, cex = 0.5)
# Plotting frame~x for the first minute of the recording.
plot(blinking[,c(1,3)], pch = 19, cex = 0.5, ylim = c(0,25*60))
setwd("C:/Users/louis/Documents/GitHub/MBC-for-PALM/MBC-for-PALM")
source("./MBC/main.R")
source("./Code/MBC/main.R")
dir("C:/Users/louis/Documents/GitHub/MBC-for-PALM/MBC-for-PALM/Code")
